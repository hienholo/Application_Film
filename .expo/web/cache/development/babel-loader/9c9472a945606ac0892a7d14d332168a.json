{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createContext } from \"react\";\nexport var ThemeContext = createContext();\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ThemeContextProvider = function (_Component) {\n  _inherits(ThemeContextProvider, _Component);\n\n  var _super = _createSuper(ThemeContextProvider);\n\n  function ThemeContextProvider() {\n    var _this;\n\n    _classCallCheck(this, ThemeContextProvider);\n\n    _this = _super.call(this);\n\n    _this.getisDarkMode = function _callee() {\n      var value;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isDarkMode\"));\n\n            case 3:\n              value = _context.sent;\n\n              if (!(value == null)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"isDarkMode\", \"false\"));\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"isFirstRun\", \"true\"));\n\n            case 9:\n              _context.next = 12;\n              break;\n\n            case 11:\n              if (value == \"true\") {\n                _this.setState({\n                  isDarkMode: true\n                });\n              }\n\n            case 12:\n              _context.next = 16;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 14]], Promise);\n    };\n\n    _this.changeTheme = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"isDarkMode\", !_this.state.isDarkMode == false ? \"false\" : \"true\"));\n\n            case 2:\n              _this.setState({\n                isDarkMode: !_this.state.isDarkMode\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      isDarkMode: false,\n      light: {\n        bg: \"#FFF\"\n      },\n      dark: {\n        bg: \"#222124\"\n      }\n    };\n\n    _this.getisDarkMode();\n\n    return _this;\n  }\n\n  _createClass(ThemeContextProvider, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(ThemeContext.Provider, {\n        value: _objectSpread(_objectSpread({}, this.state), {}, {\n          updateTheme: this.changeTheme\n        }),\n        children: this.props.children\n      });\n    }\n  }]);\n\n  return ThemeContextProvider;\n}(Component);\n\nexport default ThemeContextProvider;","map":{"version":3,"sources":["D:/DOCUMENTS/moviereact-master/app/contexts/ThemeContext.js"],"names":["React","Component","createContext","ThemeContext","AsyncStorage","ThemeContextProvider","getisDarkMode","getItem","value","setItem","setState","isDarkMode","changeTheme","state","light","bg","dark","updateTheme","props","children"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAO,IAAMC,YAAY,GAAGD,aAAa,EAAlC;AACP,OAAOE,YAAP,MAAyB,2CAAzB;;;IACMC,oB;;;;;AAiBJ,kCAAc;AAAA;;AAAA;;AACZ;;AADY,UAhBdC,aAgBc,GAhBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEQF,YAAY,CAACG,OAAb,CAAqB,YAArB,CAFR;;AAAA;AAENC,cAAAA,KAFM;;AAAA,oBAGRA,KAAK,IAAI,IAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIJJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,OAAnC,CAJI;;AAAA;AAAA;AAAA,+CAKJL,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,MAAnC,CALI;;AAAA;AAAA;AAAA;;AAAA;AAOV,kBAAID,KAAK,IAAI,MAAb,EAAqB;AACnB,sBAAKE,QAAL,CAAc;AAAEC,kBAAAA,UAAU,EAAE;AAAd,iBAAd;AACD;;AATS;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBF;;AAAA,UAUdC,WAVc,GAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACNR,YAAY,CAACK,OAAb,CACJ,YADI,EAEJ,CAAC,MAAKI,KAAL,CAAWF,UAAZ,IAA0B,KAA1B,GAAkC,OAAlC,GAA4C,MAFxC,CADM;;AAAA;AAKZ,oBAAKD,QAAL,CAAc;AAAEC,gBAAAA,UAAU,EAAE,CAAC,MAAKE,KAAL,CAAWF;AAA1B,eAAd;;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAVA;;AAEZ,UAAKE,KAAL,GAAa;AACXF,MAAAA,UAAU,EAAE,KADD;AAEXG,MAAAA,KAAK,EAAE;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAFI;AAGXC,MAAAA,IAAI,EAAE;AAAED,QAAAA,EAAE,EAAE;AAAN;AAHK,KAAb;;AAKA,UAAKT,aAAL;;AAPY;AAQb;;;;WAUD,kBAAS;AACP,aACE,KAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,kCAAO,KAAKO,KAAZ;AAAmBI,UAAAA,WAAW,EAAE,KAAKL;AAArC,UADP;AAAA,kBAGG,KAAKM,KAAL,CAAWC;AAHd,QADF;AAOD;;;;EA3CgClB,S;;AA8CnC,eAAeI,oBAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nexport const ThemeContext = createContext();\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nclass ThemeContextProvider extends Component {\n  getisDarkMode = async () => {\n    try {\n      const value = await AsyncStorage.getItem(\"isDarkMode\");\n      if (value == null) {\n        await AsyncStorage.setItem(\"isDarkMode\", \"false\");\n        await AsyncStorage.setItem(\"isFirstRun\", \"true\");\n      } else {\n        if (value == \"true\") {\n          this.setState({ isDarkMode: true });\n        }\n      }\n    } catch (e) {\n      // error reading value\n    }\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      isDarkMode: false,\n      light: { bg: \"#FFF\" },\n      dark: { bg: \"#222124\" },\n    };\n    this.getisDarkMode();\n  }\n\n  changeTheme = async () => {\n    await AsyncStorage.setItem(\n      \"isDarkMode\",\n      !this.state.isDarkMode == false ? \"false\" : \"true\"\n    );\n    this.setState({ isDarkMode: !this.state.isDarkMode });\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{ ...this.state, updateTheme: this.changeTheme }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nexport default ThemeContextProvider;\n"]},"metadata":{},"sourceType":"module"}