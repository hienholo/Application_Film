{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport Constants from \"expo-constants\";\nimport Cast from \"./../models/Cast\";\nimport CastItem from \"../components/CastItem\";\nimport { IMLocalized } from \"../IMLocalized\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { TouchableWithoutFeedback } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CastViewAll = function (_Component) {\n  _inherits(CastViewAll, _Component);\n\n  var _super = _createSuper(CastViewAll);\n\n  function CastViewAll(props) {\n    var _this;\n\n    _classCallCheck(this, CastViewAll);\n\n    _this = _super.call(this, props);\n    _this.baseUrl = \"http://api.themoviedb.org/3/movie/\";\n    _this.apiKey = \"802b2c4b88ea1183e50e6b285a27696e\";\n    _this.state = {\n      castList: [],\n      isLoading: true\n    };\n\n    _this.fetchCasts = function () {\n      return fetch(_this.baseUrl + _this.props.route.params.movieid + \"/credits?api_key=\" + _this.apiKey).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        var casts = [];\n        responseJson.cast.map(function (cast) {\n          casts.push(new Cast({\n            id: cast.id,\n            name: cast.name,\n            profile_path: cast.profile_path,\n            character: cast.character\n          }));\n        });\n\n        _this.setState({\n          castList: casts,\n          isLoading: false\n        });\n      }).catch(function (error) {\n        return console.error(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CastViewAll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchCasts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.isLoading) {\n        _jsx(View, {\n          style: {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: _jsx(ActivityIndicator, {\n            animating: true,\n            size: \"large\"\n          })\n        });\n      }\n\n      return _jsx(ThemeContext.Consumer, {\n        children: function children(context) {\n          var isDarkMode = context.isDarkMode,\n              light = context.light,\n              dark = context.dark;\n          return _jsxs(View, {\n            style: [styles.container, {\n              backgroundColor: isDarkMode ? dark.bg : light.bg\n            }],\n            children: [_jsx(StatusBar, {\n              style: isDarkMode ? \"light\" : \"dark\"\n            }), _jsx(TouchableWithoutFeedback, {\n              onPress: function onPress() {\n                return _this2.props.navigation.pop();\n              },\n              children: _jsxs(View, {\n                style: {\n                  flexDirection: \"row\",\n                  flexWrap: \"wrap\",\n                  alignItems: \"center\",\n                  paddingLeft: 20\n                },\n                children: [_jsx(MaterialCommunityIcons, {\n                  name: \"chevron-left\",\n                  color: isDarkMode ? light.bg : dark.bg,\n                  size: 26\n                }), _jsx(Text, {\n                  style: [styles.title, {\n                    color: isDarkMode ? light.bg : dark.bg\n                  }],\n                  children: IMLocalized(\"casts\")\n                })]\n              })\n            }), _jsx(ScrollView, {\n              style: {\n                paddingHorizontal: 20\n              },\n              children: _this2.state.castList.map(function (cast) {\n                return _jsx(CastItem, {\n                  context: context,\n                  cast: cast\n                }, cast.id);\n              })\n            })]\n          });\n        }\n      });\n    }\n  }]);\n\n  return CastViewAll;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight + 10\n  },\n  title: {\n    fontSize: 22,\n    fontFamily: \"poppins-sb\"\n  }\n});\nexport default CastViewAll;","map":{"version":3,"sources":["D:/DOCUMENTS/moviereact-master/app/pages/CastViewAll.js"],"names":["React","Component","ThemeContext","Constants","Cast","CastItem","IMLocalized","MaterialCommunityIcons","TouchableWithoutFeedback","CastViewAll","props","baseUrl","apiKey","state","castList","isLoading","fetchCasts","fetch","route","params","movieid","then","response","json","responseJson","casts","cast","map","push","id","name","profile_path","character","setState","catch","error","console","flex","justifyContent","alignItems","context","isDarkMode","light","dark","styles","container","backgroundColor","bg","navigation","pop","flexDirection","flexWrap","paddingLeft","title","color","paddingHorizontal","StyleSheet","create","paddingTop","statusBarHeight","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  StatusBar,\n  ActivityIndicator,\n} from \"react-native\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport Constants from \"expo-constants\";\nimport Cast from \"./../models/Cast\";\nimport CastItem from \"../components/CastItem\";\nimport { IMLocalized } from \"../IMLocalized\";\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { TouchableWithoutFeedback } from \"react-native-gesture-handler\";\nclass CastViewAll extends Component {\n  baseUrl = \"http://api.themoviedb.org/3/movie/\";\n  apiKey = \"802b2c4b88ea1183e50e6b285a27696e\";\n  state = {\n    castList: [],\n    isLoading: true,\n  };\n  constructor(props) {\n    super(props);\n  }\n\n  fetchCasts = () => {\n    return fetch(\n      this.baseUrl +\n        this.props.route.params.movieid +\n        \"/credits?api_key=\" +\n        this.apiKey\n    )\n      .then((response) => response.json())\n      .then((responseJson) => {\n        var casts = [];\n        responseJson.cast.map((cast) => {\n          casts.push(\n            new Cast({\n              id: cast.id,\n              name: cast.name,\n              profile_path: cast.profile_path,\n              character: cast.character,\n            })\n          );\n        });\n        this.setState({ castList: casts, isLoading: false });\n      })\n      .catch((error) => console.error(error));\n  };\n\n  componentDidMount() {\n    this.fetchCasts();\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <ActivityIndicator animating={true} size={\"large\"} />\n      </View>;\n    }\n    return (\n      <ThemeContext.Consumer>\n        {(context) => {\n          const { isDarkMode, light, dark } = context;\n          return (\n            <View\n              style={[\n                styles.container,\n                { backgroundColor: isDarkMode ? dark.bg : light.bg },\n              ]}\n            >\n              <StatusBar style={isDarkMode ? \"light\" : \"dark\"} />\n              <TouchableWithoutFeedback\n                onPress={() => this.props.navigation.pop()}\n              >\n                <View\n                  style={{\n                    flexDirection: \"row\",\n                    flexWrap: \"wrap\",\n                    alignItems: \"center\",\n                    paddingLeft: 20,\n                  }}\n                >\n                  <MaterialCommunityIcons\n                    name=\"chevron-left\"\n                    color={isDarkMode ? light.bg : dark.bg}\n                    size={26}\n                  />\n                  <Text\n                    style={[\n                      styles.title,\n                      { color: isDarkMode ? light.bg : dark.bg },\n                    ]}\n                  >\n                    {IMLocalized(\"casts\")}\n                  </Text>\n                </View>\n              </TouchableWithoutFeedback>\n              <ScrollView style={{ paddingHorizontal: 20 }}>\n                {this.state.castList.map((cast) => {\n                  return (\n                    <CastItem key={cast.id} context={context} cast={cast} />\n                  );\n                })}\n              </ScrollView>\n            </View>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight + 10,\n  },\n  title: {\n    fontSize: 22,\n    fontFamily: \"poppins-sb\",\n  },\n});\n\nexport default CastViewAll;\n"]},"metadata":{},"sourceType":"module"}