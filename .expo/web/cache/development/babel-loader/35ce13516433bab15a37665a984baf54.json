{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport Constants from \"expo-constants\";\nimport * as FileSystem from \"expo-file-system\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as SQLite from \"expo-sqlite\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport AppLoading from \"expo-app-loading\";\nimport RecentMovieItem from \"../components/RecentMovieItem\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { IMLocalized } from \"../IMLocalized\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = SQLite.openDatabase(\"movie.db\");\nexport default function Favorite(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var fetchSqliteData = function fetchSqliteData() {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM Favorites\", null, function (txObj, _ref2) {\n        var _array = _ref2.rows._array;\n        setData(_array);\n        setLoading(false);\n      }, function (txObj, error) {\n        return console.error(error);\n      });\n    });\n  };\n\n  useEffect(function () {\n    var unsubscribe = navigation.addListener(\"focus\", function () {\n      fetchSqliteData();\n    });\n    return unsubscribe;\n  }, [navigation]);\n\n  if (data == null && isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(AppLoading, {})\n    });\n  } else if (!isLoading) {\n    if (data.length == 0) {\n      return _jsx(ThemeContext.Consumer, {\n        children: function children(context) {\n          var isDarkMode = context.isDarkMode,\n              light = context.light,\n              dark = context.dark;\n          return _jsxs(View, {\n            style: {\n              flex: 1,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: isDarkMode ? dark.bg : light.bg\n            },\n            children: [_jsx(StatusBar, {\n              style: isDarkMode ? \"light\" : \"dark\"\n            }), _jsxs(View, {\n              style: {\n                alignItems: \"center\"\n              },\n              children: [_jsx(MaterialCommunityIcons, {\n                name: \"cloud-off-outline\",\n                color: isDarkMode ? light.bg : dark.bg,\n                size: 36\n              }), _jsx(View, {\n                style: {\n                  marginBottom: 5\n                }\n              }), _jsx(Text, {\n                style: [styles.nodata, {\n                  color: isDarkMode ? light.bg : dark.bg\n                }],\n                children: IMLocalized(\"nodatafound\")\n              })]\n            })]\n          });\n        }\n      });\n    } else {\n      return _jsx(ThemeContext.Consumer, {\n        children: function children(context) {\n          var isDarkMode = context.isDarkMode,\n              light = context.light,\n              dark = context.dark;\n          return _jsxs(View, {\n            style: [styles.container, {\n              backgroundColor: isDarkMode ? dark.bg : light.bg\n            }],\n            children: [_jsx(StatusBar, {\n              style: isDarkMode ? \"light\" : \"dark\"\n            }), _jsx(Text, {\n              style: [styles.title, {\n                color: isDarkMode ? light.bg : dark.bg\n              }],\n              children: IMLocalized(\"favorites\")\n            }), _jsx(ScrollView, {\n              style: {\n                paddingHorizontal: 20\n              },\n              children: data.map(function (item) {\n                var movieDir = FileSystem.documentDirectory + \"/\" + item.movie_id + \"/\";\n                var posterPath = movieDir + \"poster_path.jpg\";\n                var backdropPath = movieDir + \"backdrop_path.jpg\";\n                item.genres = typeof item.genres == \"string\" ? item.genres.split(\",\") : item.genres;\n                item.poster_path = posterPath;\n                item.backdrop_path = backdropPath;\n                item.id = item.movie_id;\n                return _jsx(RecentMovieItem, {\n                  item: item,\n                  context: context\n                }, item.id);\n              })\n            })]\n          });\n        }\n      });\n    }\n  }\n\n  return _jsx(View, {});\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight + 10\n  },\n  header: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 20\n  },\n  title: {\n    paddingLeft: 20,\n    fontSize: 22,\n    fontFamily: \"poppins-sb\",\n    marginBottom: 20\n  },\n  nodata: {\n    fontFamily: \"poppins-r\",\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/DOCUMENTS/moviereact-master/app/pages/Favorite.js"],"names":["React","useState","useEffect","Constants","FileSystem","SQLite","ScrollView","AppLoading","RecentMovieItem","MaterialCommunityIcons","StatusBar","ThemeContext","IMLocalized","db","openDatabase","Favorite","navigation","route","data","setData","isLoading","setLoading","fetchSqliteData","transaction","tx","executeSql","txObj","_array","rows","error","console","unsubscribe","addListener","flex","justifyContent","alignItems","length","context","isDarkMode","light","dark","backgroundColor","bg","marginBottom","styles","nodata","color","container","title","paddingHorizontal","map","item","movieDir","documentDirectory","movie_id","posterPath","backdropPath","genres","split","poster_path","backdrop_path","id","StyleSheet","create","paddingTop","statusBarHeight","header","width","flexDirection","paddingLeft","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Constants from \"expo-constants\";\nimport * as FileSystem from \"expo-file-system\";\nimport { Text, View, StyleSheet } from \"react-native\";\nimport * as SQLite from \"expo-sqlite\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport AppLoading from \"expo-app-loading\";\nimport RecentMovieItem from \"../components/RecentMovieItem\";\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { IMLocalized } from \"../IMLocalized\";\nconst db = SQLite.openDatabase(\"movie.db\");\nexport default function Favorite({ navigation, route }) {\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  const fetchSqliteData = () => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"SELECT * FROM Favorites\",\n        null,\n        (txObj, { rows: { _array } }) => {\n          setData(_array);\n          setLoading(false);\n        },\n        (txObj, error) => console.error(error)\n      );\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = navigation.addListener(\"focus\", () => {\n      fetchSqliteData();\n    });\n    return unsubscribe;\n  }, [navigation]);\n\n  if (data == null && isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <AppLoading />\n      </View>\n    );\n  } else if (!isLoading) {\n    if (data.length == 0) {\n      return (\n        <ThemeContext.Consumer>\n          {(context) => {\n            const { isDarkMode, light, dark } = context;\n            return (\n              <View\n                style={{\n                  flex: 1,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  backgroundColor: isDarkMode ? dark.bg : light.bg,\n                }}\n              >\n                <StatusBar style={isDarkMode ? \"light\" : \"dark\"} />\n                <View style={{ alignItems: \"center\" }}>\n                  <MaterialCommunityIcons\n                    name=\"cloud-off-outline\"\n                    color={isDarkMode ? light.bg : dark.bg}\n                    size={36}\n                  />\n                  <View style={{ marginBottom: 5 }} />\n                  <Text\n                    style={[\n                      styles.nodata,\n                      { color: isDarkMode ? light.bg : dark.bg },\n                    ]}\n                  >\n                    {IMLocalized(\"nodatafound\")}\n                  </Text>\n                </View>\n              </View>\n            );\n          }}\n        </ThemeContext.Consumer>\n      );\n    } else {\n      return (\n        <ThemeContext.Consumer>\n          {(context) => {\n            const { isDarkMode, light, dark } = context;\n            return (\n              <View\n                style={[\n                  styles.container,\n                  { backgroundColor: isDarkMode ? dark.bg : light.bg },\n                ]}\n              >\n                <StatusBar style={isDarkMode ? \"light\" : \"dark\"} />\n                <Text\n                  style={[\n                    styles.title,\n                    { color: isDarkMode ? light.bg : dark.bg },\n                  ]}\n                >\n                  {IMLocalized(\"favorites\")}\n                </Text>\n                <ScrollView style={{ paddingHorizontal: 20 }}>\n                  {data.map((item) => {\n                    const movieDir =\n                      FileSystem.documentDirectory + \"/\" + item.movie_id + \"/\";\n                    const posterPath = movieDir + \"poster_path.jpg\";\n                    const backdropPath = movieDir + \"backdrop_path.jpg\";\n                    item.genres =\n                      typeof item.genres == \"string\"\n                        ? item.genres.split(\",\")\n                        : item.genres;\n                    item.poster_path = posterPath;\n                    item.backdrop_path = backdropPath;\n                    item.id = item.movie_id;\n                    return (\n                      <RecentMovieItem\n                        key={item.id}\n                        item={item}\n                        context={context}\n                      />\n                    );\n                  })}\n                </ScrollView>\n              </View>\n            );\n          }}\n        </ThemeContext.Consumer>\n      );\n    }\n  }\n\n  return <View></View>;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight + 10,\n  },\n  header: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 20,\n  },\n  title: {\n    paddingLeft: 20,\n    fontSize: 22,\n    fontFamily: \"poppins-sb\",\n    marginBottom: 20,\n  },\n  nodata: {\n    fontFamily: \"poppins-r\",\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}