{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport MainRoot from \"./app/pages/MainRoot\";\nimport MovieDetail from \"./app/pages/MovieDetail\";\nimport * as Font from \"expo-font\";\nimport ThemeContextProvider, { ThemeContext } from \"./app/contexts/ThemeContext\";\nimport ViewAll from \"./app/pages/ViewAll\";\nimport AppIntro from \"./app/pages/AppIntro\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar Stack = createStackNavigator();\nimport { init } from \"./app/IMLocalized\";\nimport CastViewAll from \"./app/pages/CastViewAll\";\nimport * as Notifications from \"expo-notifications\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport CustomSplashScreen from \"./app/components/CustomSplashScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setReady = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDarkMode = _useState4[0],\n      setDarkMode = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expoPushToken = _useState6[0],\n      setExpoPushToken = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      notification = _useState8[0],\n      setNotification = _useState8[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fontsLoaded = _React$useState2[0],\n      setFontLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"MainRoot\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialPage = _React$useState4[0],\n      setInitialPage = _React$useState4[1];\n\n  var getPage = function getPage() {\n    var value;\n    return _regeneratorRuntime.async(function getPage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isFirstRun\"));\n\n          case 3:\n            value = _context2.sent;\n\n            if (value == \"true\" || value == null) {\n              setInitialPage(\"AppIntro\");\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var onLoadLayout = function onLoadLayout() {\n    var value;\n    return _regeneratorRuntime.async(function onLoadLayout$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            SplashScreen.hideAsync();\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isDarkMode\"));\n\n          case 4:\n            value = _context3.sent;\n\n            if (value != null) {\n              if (value == \"true\") {\n                setDarkMode(true);\n              }\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n              return setTimeout(resolve, 2000);\n            }));\n\n          case 8:\n            setReady(true);\n            _context3.next = 13;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](1);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n\n  useEffect(function () {\n    SplashScreen.preventAutoHideAsync();\n\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                \"poppins-r\": require(\"./app/assets/fonts/Poppins-Regular.ttf\"),\n                \"poppins-l\": require(\"./app/assets/fonts/Poppins-Light.ttf\"),\n                \"poppins-sb\": require(\"./app/assets/fonts/Poppins-SemiBold.ttf\"),\n                \"poppins-b\": require(\"./app/assets/fonts/Poppins-Bold.ttf\")\n              }));\n\n            case 3:\n              _context4.next = 8;\n              break;\n\n            case 5:\n              _context4.prev = 5;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.warn(_context4.t0);\n\n            case 8:\n              _context4.prev = 8;\n              setFontLoaded(true);\n              return _context4.finish(8);\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 5, 8, 11]], Promise);\n    }\n\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response.notification.request.content.data);\n      var movieData = response.notification.request.content.data;\n    });\n    getPage().then(function () {\n      return loadResourcesAndDataAsync();\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  function registerForPushNotificationsAsync() {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 2:\n            _await$Notifications$ = _context5.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== \"granted\")) {\n              _context5.next = 11;\n              break;\n            }\n\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 8:\n            _await$Notifications$2 = _context5.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 11:\n            if (!(finalStatus !== \"granted\")) {\n              _context5.next = 14;\n              break;\n            }\n\n            alert(\"Failed to get push token for push notification!\");\n            return _context5.abrupt(\"return\");\n\n          case 14:\n            _context5.next = 16;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 16:\n            token = _context5.sent.data;\n            return _context5.abrupt(\"return\", token);\n\n          case 18:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  init();\n\n  if (!isReady) {\n    return _jsx(CustomSplashScreen, {\n      onLoadLayout: onLoadLayout,\n      isDarkMode: isDarkMode\n    });\n  }\n\n  return _jsxs(ThemeContextProvider, {\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        initialRouteName: initialPage,\n        screenOptions: {\n          headerShown: false\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"MainRoot\",\n          component: MainRoot,\n          options: {\n            title: \"MainRoot\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"MovieDetail\",\n          component: MovieDetail,\n          options: {\n            title: \"MovieDetail\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"ViewAll\",\n          component: ViewAll,\n          options: {\n            title: \"ViewAll\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"AppIntro\",\n          component: AppIntro,\n          options: {\n            title: \"AppIntro\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"CastViewAll\",\n          component: CastViewAll,\n          options: {\n            title: \"CastViewAll\"\n          }\n        })]\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["D:/DOCUMENTS/moviereact-master/App.js"],"names":["StatusBar","React","useState","useRef","useEffect","NavigationContainer","createStackNavigator","MainRoot","MovieDetail","Font","ThemeContextProvider","ThemeContext","ViewAll","AppIntro","AsyncStorage","Stack","init","CastViewAll","Notifications","SplashScreen","CustomSplashScreen","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","isReady","setReady","isDarkMode","setDarkMode","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","fontsLoaded","setFontLoaded","initialPage","setInitialPage","getPage","getItem","value","console","error","onLoadLayout","hideAsync","Promise","resolve","setTimeout","preventAutoHideAsync","loadResourcesAndDataAsync","loadAsync","require","warn","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","log","request","content","data","movieData","removeNotificationSubscription","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","headerShown","title"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport MainRoot from \"./app/pages/MainRoot\";\nimport MovieDetail from \"./app/pages/MovieDetail\";\nimport * as Font from \"expo-font\";\nimport ThemeContextProvider, {\n  ThemeContext,\n} from \"./app/contexts/ThemeContext\";\nimport ViewAll from \"./app/pages/ViewAll\";\nimport AppIntro from \"./app/pages/AppIntro\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nconst Stack = createStackNavigator();\nimport { init } from \"./app/IMLocalized\";\nimport CastViewAll from \"./app/pages/CastViewAll\";\nimport * as Notifications from \"expo-notifications\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport CustomSplashScreen from \"./app/components/CustomSplashScreen\";\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [isReady, setReady] = useState(false);\n  const [isDarkMode, setDarkMode] = useState(false);\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n  const [fontsLoaded, setFontLoaded] = React.useState(false);\n  const [initialPage, setInitialPage] = React.useState(\"MainRoot\");\n  const getPage = async () => {\n    try {\n      const value = await AsyncStorage.getItem(\"isFirstRun\");\n      if (value == \"true\" || value == null) {\n        setInitialPage(\"AppIntro\");\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const onLoadLayout = async () => {\n    SplashScreen.hideAsync();\n    try {\n      const value = await AsyncStorage.getItem(\"isDarkMode\");\n      if (value != null) {\n        if (value == \"true\") {\n          setDarkMode(true);\n        }\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      setReady(true);\n    } catch (e) {\n      // error reading value\n    }\n  };\n\n  useEffect(() => {\n    SplashScreen.preventAutoHideAsync();\n    async function loadResourcesAndDataAsync() {\n      try {\n        //TODO: Load fonts\n        await Font.loadAsync({\n          \"poppins-r\": require(\"./app/assets/fonts/Poppins-Regular.ttf\"),\n          \"poppins-l\": require(\"./app/assets/fonts/Poppins-Light.ttf\"),\n          \"poppins-sb\": require(\"./app/assets/fonts/Poppins-SemiBold.ttf\"),\n          \"poppins-b\": require(\"./app/assets/fonts/Poppins-Bold.ttf\"),\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setFontLoaded(true);\n      }\n    }\n    //AsyncStorage.clear();\n    //setInitialPage(\"AppIntro\");\n    //loadResourcesAndDataAsync();\n    registerForPushNotificationsAsync().then((token) =>\n      setExpoPushToken(token)\n    );\n\n    notificationListener.current = Notifications.addNotificationReceivedListener(\n      (notification) => {\n        setNotification(notification);\n      }\n    );\n\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(\n      (response) => {\n        console.log(response.notification.request.content.data);\n        const movieData = response.notification.request.content.data;\n      }\n    );\n\n    getPage().then(() => loadResourcesAndDataAsync());\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  async function registerForPushNotificationsAsync() {\n    let token;\n    const {\n      status: existingStatus,\n    } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      alert(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    //console.log(token);\n\n    /* if (Platform.OS === \"android\") {\n      Notifications.setNotificationChannelAsync(\"default\", {\n        name: \"default\",\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: \"#FF231F7C\",\n      });\n    }*/\n\n    return token;\n  }\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  init();\n  if (!isReady) {\n    return (\n      <CustomSplashScreen onLoadLayout={onLoadLayout} isDarkMode={isDarkMode} />\n    );\n  }\n\n  return (\n    <ThemeContextProvider>\n      <StatusBar style=\"auto\" />\n      <NavigationContainer>\n        <Stack.Navigator\n          initialRouteName={initialPage}\n          screenOptions={{\n            headerShown: false,\n          }}\n        >\n          <Stack.Screen\n            name=\"MainRoot\"\n            component={MainRoot}\n            options={{\n              title: \"MainRoot\",\n            }}\n          />\n          <Stack.Screen\n            name=\"MovieDetail\"\n            component={MovieDetail}\n            options={{ title: \"MovieDetail\" }}\n          />\n          <Stack.Screen\n            name=\"ViewAll\"\n            component={ViewAll}\n            options={{ title: \"ViewAll\" }}\n          />\n\n          <Stack.Screen\n            name=\"AppIntro\"\n            component={AppIntro}\n            options={{ title: \"AppIntro\" }}\n          />\n\n          <Stack.Screen\n            name=\"CastViewAll\"\n            component={CastViewAll}\n            options={{ title: \"CastViewAll\" }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </ThemeContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}